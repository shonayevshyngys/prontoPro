// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/notification": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Internal"
                ],
                "summary": "Creates a notification object",
                "operationId": "createNotification",
                "parameters": [
                    {
                        "description": "To create notification you need to pass providerId and notification text",
                        "name": "Notification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Notification"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Notification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/notification/provider/{provider_id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Get provider's notification",
                "operationId": "getProviderNotifications",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of a provider",
                        "name": "provider_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/util.SuccessMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/notification/subscribe": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Subscribes user to a provider",
                "operationId": "Subscribe",
                "parameters": [
                    {
                        "description": "Subscribes user to provider to get notifications",
                        "name": "SubscriptionBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/util.SubscriptionBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/util.SuccessMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/notification/user/{user_id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Get user's subbed notifications",
                "operationId": "getUserNotifications",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of a user",
                        "name": "user_io",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/util.SuccessMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/rating/check/{provider_id}/{user_id}": {
            "get": {
                "tags": [
                    "Internal"
                ],
                "summary": "check if user and provider exists. It's needed for validation on notification service. Only for internal usage",
                "operationId": "check",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of a provider",
                        "name": "provider_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "id of a user",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/util.SuccessMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/rating/provider": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rating"
                ],
                "summary": "Creates a provider",
                "operationId": "createProvider",
                "parameters": [
                    {
                        "description": "Binding required only for name and description, id will be adjusted by DB",
                        "name": "Provider",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Provider"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Provider"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/rating/provider/{provider_id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rating"
                ],
                "summary": "Gets a provider with average rating from review",
                "operationId": "getProvider",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of a provider",
                        "name": "provider_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Provider"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/rating/review": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rating"
                ],
                "summary": "Creates a review binded to user and provider",
                "operationId": "createReview",
                "parameters": [
                    {
                        "description": "To create review you need to pass userId, providerId, text and rating",
                        "name": "Review",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/util.CreateReviewDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Review"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/rating/user": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rating"
                ],
                "summary": "Creates a user",
                "operationId": "createUser",
                "parameters": [
                    {
                        "description": "Binding required only for username, id will be adjusted by DB",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorMessage"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Notification": {
            "type": "object",
            "properties": {
                "notification": {
                    "type": "string"
                },
                "providerID": {
                    "type": "integer"
                }
            }
        },
        "models.Provider": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                }
            }
        },
        "models.Review": {
            "type": "object",
            "required": [
                "rating"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "provider": {
                    "$ref": "#/definitions/models.Provider"
                },
                "providerID": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer"
                },
                "reviewText": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "util.CreateReviewDTO": {
            "type": "object",
            "required": [
                "providerId",
                "rating",
                "userId"
            ],
            "properties": {
                "providerId": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer"
                },
                "reviewText": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "util.ErrorMessage": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "util.SubscriptionBody": {
            "type": "object",
            "properties": {
                "providerId": {
                    "type": "integer"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "util.SuccessMessage": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:80",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "ProntoPro",
	Description:      "This is a take home assignment for pronto pro",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
